***ANSWER ALL OF THE QUESTIONS BELOW***

What is a programming language?
Answer:
A programming language is a vocabulary and set of grammatical rules for instructing a computer or computing
device to perform specific tasks.

What is a JDK composed of? Define each component?
Answer:
JDK stands for Java Development Kit. It is the tool necessary to compile, document and package Java programs.
It contains JRE and development tools.
1- JRE stands for Java Runtime Environment and refers to a runtime environment in which Java bytecode can be executed.
JRE is an implementation of the JVM which physically exists.
2- Development tools: Java development tools include different tools such as: javac (a compiler),
java ( launcher for Java applications), javap (class file disassembler), jdb (java debugger), and others.
    - Java compiler (javac) is used to convert Java text file into an executable program. Java text segment converted
    into bytecode after compilation which carries the .class extension.
    - Java interpreter or loader converts each program statement into the machine code. This includes source code,
    pre-compiled code, and scripts. The difference from a compiler is that compilers will convert the code into machine
     code (create an exe) before program run and interpreters convert code into machine code when the program is run.
    - Java archiver (jar) is the most popular after javac is the jar tool. The jar file is nothing but a full pack
    of Java classes. After creating the .class files, you can put them together in a .jar, which compresses and
    structures them in a predictable fashion.

What is an IDE?
Answer:
An IDE, which stands for Integrated Development Environment, is a program that helps write software. An IDE helps also
 organize software projects, write code, test and debug.

What are some of the most popular Java IDEs available in the market?
Answer:
Some popular Java IDEs are Eclipse, Visual Studio Code, NetBeans, IntelliJ IDEA, JDeveloper.

Explain the entire java life cycle.
Answer:
There are three main stages in the life cycle of a java program, which are:
    Editing the program
    Compiling the source code
    Executing the byte code
First, the user starts with typing the program in a text-editor, like notepad or such. After completing editing of the
program, the file needs to be saved with .java extension.
Second step is compilation. The input to the compiler is Java source code .java. The output of the compiler is bytecode.
The file which is generated after compilation is .class file.
Last step is execution. The bytecode generated by the compiler will be executed by Java Virtual Machine (JVM). Input to
the JVM is bytecode and output is machine code (0’s and 1’s) which will be executed by the CPU of the local machine.

What is a class?
Answer:
A class is a blueprint or representation of a real-world object.

What is an object?
Answer:
in Java, an object is an entity that has states and behaviors. Any object can be described using its
attributes/characteristics and methods/behaviors that object can perform.

What is the entry point of a Java project?
Answer:
An entry point is a point in a program where the execution of a program begins, and where the program has access to
command line arguments, the main method is the entry point of a Java application, which is public static void main(String[])

Why is the main() method static?
Answer:
In any Java program, the main() method is the starting point from where the compiler starts program execution. Because
of that Java main() method is always static, so the compiler can call it without the creation of an object or before
the creation of an object of the class.

Which class is the superclass of all classes?
Answer:
Java's super-class is the Object class, which is stored in java.lang package.

What is difference between path and classpath variables?
Answer:
1- PATH is an environment variable. It is used by operating system to find the executable files (.exe) or in other words
java binaries (java or javac), and CLASSPATH is also an environment variable used by Application ClassLoader to locate
and load the .class files(compiled java bytecodes).
2- In order to set PATH,  JDK_HOME/bin directory needs to be included in PATH environment variable.
In order to set CLASSPATH, we need to include all the directories which contain .class files and jar files  as
required by the application.
3- PATH environment variable once set, its value cannot be overridden via java settings. However, CLASSPATH environment
variable can be overridden by using the command line option -cp or -classpath to both javac and java commands.
4- PATH is used by operating system(Windows and Linux) to execute command in the shell or to find any binary, when
CLASSPATH is only used by Application CLASSLOADER to load class files.

What is the difference between an Interface and Abstract class?
Answer:
1- abstract keyword is used to create an abstract class, and it also can be used with methods; whereas interface keyword
is used to create interface, and cannot be used with methods.
2- Subclasses use extends keyword to extend an abstract class, and need to provide implementation of all the declared
methods in the abstract class unless the subclass is also an abstract class; whereas subclasses use implements keyword
to implement interfaces and should provide implementation for all the methods declared in the interface.
3- Abstract classes can have methods with implementation; whereas interfaces provide absolute abstraction and cannot
have any method implementations.
4- Abstract classes can have constructors but interfaces cannot have constructors.
5- Abstract class have all the features of a normal java class except that they cannot be instantiated, the abstract
keyword can be used to make a class abstract but interfaces are a completely different and can have only public static
final constants and method declarations.
6- Abstract class methods can have access modifiers as public, private, protected, static but interface methods are
implicitly public and abstract, no other access modifiers with interface methods can be used.
7- A subclass can only extend one abstract class, but it can implement multiple interfaces.
8- Abstract classes can extend other class and implement interfaces, but interface can only extend other interfaces.
9- An abstract class can be run if it has a main() method, but an interface cannot because it cannot have main
method implementation.

Can you make an Object from an Interface and Abstract class? If yes or no, how would you do it?
Answer:
- Interface: no, we cannot instantiate an interface, it contains abstract methods which all need to be defined in
the class. To access the members of an interface we need to implement it and provide implementation to all its
abstract methods.
- Abstract class: no, we cannot instantiate an abstract class either, because it is abstract, which means it is not
complete, therefore it cannot be used. To implement features of an abstract class, we inherit subclasses from it and
create objects of the subclass. A subclass must override all abstract methods of an abstract class.

What is Access Modifier?
Answer:
An access modifier is a keyword in object-oriented programming that is used to set the accessibility of classes,
constructors, methods, and other members. Using an access modifier, we can set the scope or accessibility of these
classes, methods, constructors, and other members.

What is OOP? Define each OOP concept.
Answer:
OOP stand for Object-Oriented Programming, OOP concepts include abstraction, encapsulation, inheritance and
polymorphism. Basically, the OOP concepts let us create working methods and variables, then re-use all or part of
them without compromising security.
1- Abstraction: abstraction is the process of hiding or covering certain details or the internal process and
showing only essential information to the user.
2- Encapsulation: encapsulation is data hiding. In encapsulation, the variables of a class will be hidden from other
classes, and can be accessed only through the methods of their current class.
To achieve encapsulation, the variables of a class need to be declared as private. And to modify and view the variables
values, we need to provide public getter and setter methods.
3- Inheritance: inheritance can be defined as the process where one class acquires the properties (methods and fields)
of another class. The class which inherits the properties of other is known as subclass, derived class, or child
class and the class whose properties are inherited is known as superclass, base class, or parent class.
Inheritance is used when we have IS-A relationship between objects, and is implemented using extends keyword.
4- Polymorphism: polymorphism is the ability of an object to take many forms. Polymorphism allows us to perform the
same action in different ways. Polymorphism occurs when we have many classes that are related to each other
by inheritance.
Polymorphism is of two types:
    - Compile-time polymorphism (method overloading)
    - Runtime polymorphism(method overriding)

What is Java Package and which package is imported by default?
Answer:
A java package is a group of similar types of classes, interfaces and sub-packages. In Java, a package can be
categorized in two form, built-in package and user-defined package. There are many built-in packages such as java,
lang, awt, javax, swing, net, io, util, sql etc.
We use packages to avoid name conflicts, and to write a better maintainable code. Packages are divided into two
categories:
Built-in Packages (packages from the Java API)
User-defined Packages (create your own packages)
java. lang package is imported by default.

What is an API? List some API's that you have used so far.
Answer:
API stands for “Application Programming Interface”
An API is a software intermediary that allows two applications to talk to each other. In
other words, an API is the messenger that delivers our request to the provider that we are
requesting it from and then delivers the response back to us.
    - Log-in using GitHub;
    - log-in using Discord;
    - paid with PayPal when I purchased CodeLab.


Does java support multiple inheritance? Why or why not?
Answer:
No, Java does not support multiple inheritance.
The problem with multiple inheritance is that if multiple parent classes have the same method name, then at runtime it
becomes difficult for the compiler to decide which method to execute from the child class. Therefore, Java does not
support multiple inheritance.

What is method overloading? List all of the different ways to overload.
Answer:
Overloading occurs when two or more methods in one class have the same method name but different parameters.
Method Overloading is a compile-time polymorphism.
In Method Overloading, Methods of the same class shares the same name but accepting:
    - different number of parameters;
    - different data types of parameters or
    - different order of parameters (different data type and different order).
Method Overloading is to “add” or “extend” more to the method’s behavior, the methods must have a different signature.

Explain exceptions in java and how to handle them.
Answer:
an exception in java is an event that disrupts the normal flow of the program. It is an object which is thrown at runtime.
exception handling however, is a mechanism to handle runtime errors such as ClassNotFoundException, IOException,
SQLException, RemoteException, etc.
The try-catch is the simplest method of handling exceptions. We put the code we want to run in the try block, and any
exception that the code throws are caught by one or more catch blocks.
This method will catch any type of Java exceptions that get thrown.
We can also specify specific exceptions we would like to catch, this allows us to have dedicated code to recover from
those errors and treat those conditions separately.
In addition, any code that must be executed irrespective of occurrence of an exception is put in a finally block.
A finally block is executed in all circumstances.

What is static keyword? When and how do we use it?
Answer:
The static keyword is a non-access modifier that is applicable for blocks, variables, methods, and classes.
Static means unchanging or not changeable, which means we can change the value of it but the place in memory remains
static. It is mainly used for memory management, once we re-assign a value to the original, the old value is garbage.
Static is used when a particular piece of code is to be shared by all the instance methods, and it is also used to share
the same variable or method of a given class.
Static is also used for constant variables or methods that are the same for every instance of the class.
The way the static keyword is used is by creating a static member, either a block, a variable, a method, or a nested
class, and precede its declaration with the keyword static.

What is final keyword? When and how do we use it?
Answer:

Explain the difference between final, finally and finalize?
Answer:

What is a constructor?
Answer:

Can we have multiple constructors in a class?
Answer:

If we don't have a constructor declared, what is called during the object creation?
Answer:

What is "this" keyword in Java? When would we use it?
Answer:

What is "super" keyword in Java? What are some scenarios we would use it?
Answer:

What does JVM stand for?
Answer:

Is JVM platform independent?
Answer:

What version of Java are you using?
Answer:

What does JAR stand for?
Answer:

What is the difference between JDK and JVM?
Answer:

What is the difference between JVM and JRE?
Answer:

Explain the difference between compile-time and run-time?
Answer:

What is heap?
Answer:

How does Java manage its memory?
Answer:

What is the difference between String, StringBuffer and StringBuilder?
Answer:

What is Singleton class?
Answer:

What is Serialization and Deserialization?
Answer:

Explain the difference between While and Do..While loops?
Answer:

What is Enum?
Answer:

What is Iterator?
Answer:

Which one will take more memory: an int or Integer? Why?
Answer:

Why are Strings considered to be immutable in Java?
Answer:

What is constructor chaining in Java?
Answer:

The difference between Serial and Parallel Garbage Collector?
Answer:

What does JIT stands for?
Answer:

Explain the process of Java garbage collection?
Answer:

Can you guarantee the garbage collection process?
Answer:

What is the difference between stack and heap in Java?
Answer:

What is reflection in Java and why is it useful?
Answer:

What is multithreading in Java?
Answer:

What is synchronization in Java?
Answer:

What is a Framework?
Answer:

What are the testing Frameworks available in Java?
Answer:

What are jUnit and testNG?
Answer:

What are the dependencies for this project?
Answer:

What is dependency injection in Java?
Answer:

Explain what static binding and dynamic binding is?
Answer: