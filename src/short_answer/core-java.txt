***ANSWER ALL OF THE QUESTIONS BELOW***

What is a programming language?
Answer:
A programming language is a vocabulary and set of grammatical rules for instructing a computer or computing
device to perform specific tasks.

What is a JDK composed of? Define each component?
Answer:
JDK stands for Java Development Kit. It is the tool necessary to compile, document and package Java programs.
It contains JRE and development tools.
1- JRE stands for Java Runtime Environment and refers to a runtime environment in which Java bytecode can be executed.
JRE is an implementation of the JVM which physically exists.
2- Development tools: Java development tools include different tools such as: javac (a compiler),
java ( launcher for Java applications), javap (class file disassembler), jdb (java debugger), and others.
    - Java compiler (javac) is used to convert Java text file into an executable program. Java text segment converted
    into bytecode after compilation which carries the .class extension.
    - Java interpreter or loader converts each program statement into the machine code. This includes source code,
    pre-compiled code, and scripts. The difference from a compiler is that compilers will convert the code into machine
     code (create an exe) before program run and interpreters convert code into machine code when the program is run.
    - Java archiver (jar) is the most popular after javac is the jar tool. The jar file is nothing but a full pack
    of Java classes. After creating the .class files, you can put them together in a .jar, which compresses and
    structures them in a predictable fashion.

What is an IDE?
Answer:
An IDE, which stands for Integrated Development Environment, is a program that helps write software. An IDE helps also
 organize software projects, write code, test and debug.

What are some of the most popular Java IDEs available in the market?
Answer:
Some popular Java IDEs are Eclipse, Visual Studio Code, NetBeans, IntelliJ IDEA, JDeveloper.

Explain the entire java life cycle.
Answer:
There are three main stages in the life cycle of a java program, which are:
    Editing the program
    Compiling the source code
    Executing the byte code
First, the user starts with typing the program in a text-editor, like notepad or such. After completing editing of the
program, the file needs to be saved with .java extension.
Second step is compilation. The input to the compiler is Java source code .java. The output of the compiler is bytecode.
The file which is generated after compilation is .class file.
Last step is execution. The bytecode generated by the compiler will be executed by Java Virtual Machine (JVM). Input to
the JVM is bytecode and output is machine code (0’s and 1’s) which will be executed by the CPU of the local machine.

What is a class?
Answer:
A class is a blueprint or representation of a real-world object.
A class contains variables and methods to describe the behavior of an object.

What is an object?
Answer:
in Java, an object is a real-world entity that has states and behaviors. Any object can be described using its
attributes/characteristics and methods/behaviors that object can perform.

What is the entry point of a Java project?
Answer:
An entry point is a point in a program where the execution of a program begins, and where the program has access to
command line arguments, the main method is the entry point of a Java application, which is public static void main(String[])

Why is the main() method static?
Answer:
In any Java program, the main() method is the starting point from where the compiler starts program execution. Because
of that Java main() method is always static, so the compiler can call it without the creation of an object or before
the creation of an object of the class.

Which class is the superclass of all classes?
Answer:
Java's super-class is the Object class, which is stored in java.lang package.

What is difference between path and classpath variables?
Answer:
1- PATH is an environment variable. It is used by operating system to find the executable files (.exe) or in other words
java binaries (java or javac), and CLASSPATH is also an environment variable used by Application ClassLoader to locate
and load the .class files(compiled java bytecodes).
2- In order to set PATH,  JDK_HOME/bin directory needs to be included in PATH environment variable.
In order to set CLASSPATH, we need to include all the directories which contain .class files and jar files  as
required by the application.
3- PATH environment variable once set, its value cannot be overridden via java settings. However, CLASSPATH environment
variable can be overridden by using the command line option -cp or -classpath to both javac and java commands.
4- PATH is used by operating system(Windows and Linux) to execute command in the shell or to find any binary, when
CLASSPATH is only used by Application CLASSLOADER to load class files.

What is the difference between an Interface and Abstract class?
Answer:
1- abstract keyword is used to create an abstract class, and it also can be used with methods; whereas interface keyword
is used to create interface, and cannot be used with methods.
2- Subclasses use extends keyword to extend an abstract class, and need to provide implementation of all the declared
methods in the abstract class unless the subclass is also an abstract class; whereas subclasses use implements keyword
to implement interfaces and should provide implementation for all the methods declared in the interface.
3- Abstract classes can have methods with implementation; whereas interfaces provide absolute abstraction and cannot
have any method implementations.
4- Abstract classes can have constructors but interfaces cannot have constructors.
5- Abstract class have all the features of a normal java class except that they cannot be instantiated, the abstract
keyword can be used to make a class abstract but interfaces are a completely different and can have only public static
final constants and method declarations.
6- Abstract class methods can have access modifiers as public, private, protected, static but interface methods are
implicitly public and abstract, no other access modifiers with interface methods can be used.
7- A subclass can only extend one abstract class, but it can implement multiple interfaces.
8- Abstract classes can extend other class and implement interfaces, but interface can only extend other interfaces.
9- An abstract class can be run if it has a main() method, but an interface cannot because it cannot have main
method implementation.

Can you make an Object from an Interface and Abstract class? If yes or no, how would you do it?
Answer:
- Interface: no, we cannot instantiate an interface, it contains abstract methods which all need to be defined in
the class. To access the members of an interface we need to implement it and provide implementation to all its
abstract methods.
- Abstract class: no, we cannot instantiate an abstract class either, because it is abstract, which means it is not
complete, therefore it cannot be used. To implement features of an abstract class, we inherit subclasses from it and
create objects of the subclass. A subclass must override all abstract methods of an abstract class.

What is Access Modifier?
Answer:
Access modifiers are special keywords which are used to restrict the access of a class, constructor, data member and
method in another class.
Java supports four types of access modifiers:
    Default - no keyword required.
    Private
    Protected
    Public

What is OOP? Define each OOP concept.
Answer:
OOP stand for Object-Oriented Programming, OOP concepts include abstraction, encapsulation, inheritance and
polymorphism. Basically, the OOP concepts let us create working methods and variables, then re-use all or part of
them without compromising security.
1- Abstraction: abstraction is the process of hiding or covering certain details or the internal process and
showing only essential information to the user.
2- Encapsulation: encapsulation is data hiding. In encapsulation, the variables of a class will be hidden from other
classes, and can be accessed only through the methods of their current class.
To achieve encapsulation, the variables of a class need to be declared as private. And to modify and view the variables
values, we need to provide public getter and setter methods.
3- Inheritance: inheritance can be defined as the process where one class acquires the properties (methods and fields)
of another class. The class which inherits the properties of other is known as subclass, derived class, or child
class and the class whose properties are inherited is known as superclass, base class, or parent class.
Inheritance is used when we have IS-A relationship between objects, and is implemented using extends keyword.
4- Polymorphism: polymorphism is the ability of an object to take many forms. Polymorphism allows us to perform the
same action in different ways. Polymorphism occurs when we have many classes that are related to each other
by inheritance.
Polymorphism is of two types:
    - Compile-time polymorphism (method overloading)
    - Runtime polymorphism(method overriding)

What is Java Package and which package is imported by default?
Answer:
In Java, packages are the collection of related classes and interfaces which are bundled together. By using packages,
developers can easily modularize the code and optimize its reuse. Also, the code within the packages can be imported
by other classes and reused.
The use of packages help in avoiding name clashes, provide easier access control on the code, can contain hidden
classes which are not visible to the outer classes and only used within the package, and create a proper hierarchical
structure which makes it easier to locate the related classes.
java. lang package is imported by default.

What is an API? List some API's that you have used so far.
Answer:
API stands for Application Programming Interface.
An API is a software intermediary that allows two applications to talk to each other. In
other words, an API is the messenger that delivers our request to the provider that we are
requesting it from and then delivers the response back to us.
    - Log-in using GitHub;
    - log-in using Discord;
    - paid with PayPal when I purchased CodeLab.

Does java support multiple inheritance? Why or why not?
Answer:
No, Java does not support multiple inheritance.
The problem with multiple inheritance is that if multiple parent classes have the same method name, then at runtime it
becomes difficult for the compiler to decide which method to execute from the child class. Therefore, Java does not
support multiple inheritance.

What is method overloading? List all of the different ways to overload.
Answer:
Overloading occurs when two or more methods in one class have the same method name but different parameters.
Method Overloading is a compile-time polymorphism.
In Method Overloading, Methods of the same class shares the same name but accepting:
    - different number of parameters;
    - different data types of parameters or
    - different order of parameters (different data type and different order).
Method Overloading is to “add” or “extend” more to the method’s behavior, the methods must have a different signature.

Explain exceptions in java and how to handle them.
Answer:
an exception in java is an event that disrupts the normal flow of the program. It is an object which is thrown at runtime.
exception handling however, is a mechanism to handle runtime errors such as ClassNotFoundException, IOException,
SQLException, RemoteException, etc.
The try-catch is the simplest method of handling exceptions. We put the code we want to run in the try block, and any
exception that the code throws are caught by one or more catch blocks.
This method will catch any type of Java exceptions that get thrown.
We can also specify specific exceptions we would like to catch, this allows us to have dedicated code to recover from
those errors and treat those conditions separately.
In addition, any code that must be executed irrespective of occurrence of an exception is put in a finally block.
A finally block is executed in all circumstances.

What is static keyword? When and how do we use it?
Answer:
The static keyword is a non-access modifier that is applicable for blocks, variables, methods, and classes.
Static means unchanging or not changeable, which means we can change the value of it but the place in memory remains
static. It is mainly used for memory management, once we re-assign a value to the original, the old value is garbage.
Static is used when a particular piece of code is to be shared by all the instance methods, and it is also used to share
the same variable or method of a given class.
Static is also used for constant variables or methods that are the same for every instance of the class.
The way the static keyword is used is by creating a static member, either a block, a variable, a method, or a nested
class, and precede its declaration with the keyword static.

What is final keyword? When and how do we use it?
Answer:
The final keyword is a non-access specifier that is used to restrict a class, variable, and method.
If we initialize a variable with the final keyword, then we cannot modify its value.
If we declare a method as final, then it cannot be overridden by any subclasses.
And, if we declare a class as final, we restrict the other classes to inherit or extend it. In other words, the final
classes can not be inherited by other classes.
The final keyword is used when declaring an entity, which could be a variable, a class, or a method. Using the final
keyword prevents value from being modified. Technically, the final keyword is used when we want a variable to
always store the same value.

Explain the difference between final, finally and finalize?
Answer:
1- Definition: final is a keyword and access modifier that is used to apply restrictions on a class, method or variable;
finally is the block of Exception Handling to execute the important code whether the exception occurs or not. However,
finalize is the method that is used to perform clean up processing just before object is garbage collected.
2- Applicable to: Final keyword is used with classes, methods and variables;
finally block is always related to the try and catch block in exception handling; and
finalize() method is used with the objects.
3- functionality: with final keyword:
    - Once declared, final variable becomes constant and cannot be modified.
    - final method cannot be overridden by a subclass.
    - final class cannot be inherited.
Using finally:
    - finally block runs the important code even if exception occurs or not.
    - finally block cleans up all the resources used in try block
finalize method, however performs the cleaning activities with respect to the object before its destruction.
4- Execution: the final method is executed only when we call it;
finally block is executed as soon as the try-catch block is executed, and Its execution is not dependent on the exception.
finalize method is executed just before the object is destroyed.

What is a constructor?
Answer:
A constructor refers to a block of code which is used to initialize an object. It must have the same name as
that of the class. Also, it has no return type, and it is automatically called when an object is created.

Can we have multiple constructors in a class?
Answer:
Yes, a class can have multiple constructors, however, it is not possible to have 2 constructors with the same parameters.
The technique of having multiple constructors in a class is known as constructor overloading.

If we don't have a constructor declared, what is called during the object creation?
Answer:
The default constructor is called, because all classes have constructors, whether we define one or not, Java
automatically provides a default constructor that initializes all member variables to zero. However, once we define
our own constructor, the default constructor is no longer used.

What is "this" keyword in Java? When would we use it?
Answer:
In Java, "this" is a keyword.
It is a reference variable that refers to current object of a method or constructor.
We would use it:
    - to refer current class instance variables;
    - to invoke or initiate current class constructor;
    - to pass it as an argument in the method call;
    - to pass as argument in the constructor call;
    - to return the current class instance.

What is "super" keyword in Java? What are some scenarios we would use it?
Answer:
in Java, the super keyword is a reference variable that refers to an immediate parent class object.
When we create a subclass instance, we are also creating an instance of the parent class, which is referenced to by
the super reference variable.
The uses of the super Keyword:
    - To refer to an immediate parent class instance variable;
    - The keyword super can be used to call the method of an immediate parent class;
    - Super() can be used to call the constructor of the immediate parent class.

What does JVM stand for?
Answer:
JVM stands for Java Virtual Machine

Is JVM platform independent?
Answer:
Java Virtual Machine is not platform independent, the JVM depends on the operating system.

What version of Java are you using?
Answer:
java 11.0.14

What does JAR stand for?
Answer:
JAR stands for Java ARchive.

What is the difference between JDK and JVM?
Answer:
- JDK is Java Development Kit, and JVM is Java Virtual Machine;
- JDK is a software development kit to develop applications in Java, but JVM executes Java byte code and provides an
environment for executing it. This means that the JDK is what we need to compile Java source code, whereas, the JVM
actually runs Java bytecode.
- JDK contains tools for developing, debugging, and monitoring java code, however Software development tools are
not included in JVM;
- JDK enables developers to create Java programs that can be executed and run by the JRE and JVM, when JVM is the Java
platform component that executes source code;
- JDK comes with the installer, but JVM bundled in both software JDK and JRE.

What is the difference between JVM and JRE?
Answer:
- JVM is an engine that provides a runtime environment to drive the Java Code or applications, it converts Java bytecode
into machine language. JVM is a part of Java Run Environment (JRE), it cannot be separately downloaded and installed.
In order to install JVM, we need to install JRE;
- JVM is an environment for executing bytecode, whereas JRE is a software bundle that allows Java program to run;
- JRE contains class libraries and other supporting files, whereas software development tools are not included in JVM;
- JRE contains class libraries and other supporting files that JVM requires to execute the program, whereas JVM is
bundled in the JRE software;
- JRE is the subset of JDK, but JVM is the subset of JRE.

Explain the difference between compile-time and run-time?
Answer:
Compile-time and Runtime are the two programming terms used in the software development.
Compile-time is the time at which the source code is converted into an executable code while the run time is the time
at which the executable code is started running.
Both the compile-time and runtime refer to different types of error.
- The compile-time errors are the errors which are produced at the compile-time, and they are detected by the compiler,
whereas runtime errors are the errors which are not generated by the compiler and produce an unpredictable result at
the execution time;
- In the case of compile-time, the compiler prevents the code from execution if it detects an error in the program.
However, in the case of runtime the compiler does not detect the error, so it cannot prevent the code from the execution.
- compile-time contains the syntax and semantic errors such as missing semicolon at the end of the statement, while
runtime contains the errors such as division by zero, determining the square root of a negative number.

What is heap?
Answer:
In Java, there is heap memory and heap data structure.
1- Heap space is used for the dynamic memory allocation of Java objects and JRE classes at runtime. New objects are
always created in heap space, and the references to these objects are stored in stack memory.
These objects have global access, they can be accessed from anywhere in the application.
In others words, the Java heap is the area of memory used to store objects instantiated by applications running on
the JVM. When the JVM is started, heap memory is created and any objects in the heap can be shared between threads as
long as the application is running.
Heap stores global variables and Strings, it is a dynamic memory which is automatically managed by the JVM.
2- A heap is a special data structure, it is a tree-based data structure and can be classified as a complete binary
tree. All the nodes of the heap are arranged in a specific order.

How does Java manage its memory?
Answer:
In Java, memory management is the process of allocation and de-allocation of objects, Java's memory is managed
automatically. Garbage collector itself ensures that the unused space gets cleaned and memory can be freed when not
needed.

What is the difference between String, StringBuffer and StringBuilder?
Answer:
- String is stored in a constant String pool, StringBuffer and StringBuilder are store in the Heap memory;
- String is immutable, however, StringBuffer and StringBuilder are not (which means they're mutable);
- String and StringBuffer are thread safe, but StringBuilder is not;
- When it comes to performance, the StringBuffer is less efficient, and StringBuilder is more efficient. However,
Strings are fast.
- String is one of the most widely used classes in Java, however, StringBuffer and StringBuilder classes provide
methods to manipulate strings.

What is Singleton class?
Answer:
A Singleton class is a class that allows only one object to be created of that class.
Steps:
    - Declare a static instance of the class as  global variable;
    - Declare the constructor as private, only accessible within the class;
    - create getInstance() method.

What is Serialization and Deserialization?
Answer:
Serialization is the process of converting an object into a stream of bytes to store the object or transmit it to
memory, a database, or a file. Its main purpose is to save the state of an object in order to be able to recreate it
when needed.
Deserialization is the reverse process where the byte stream is used to recreate the actual Java object in memory.

Explain the difference between While and Do..While loops?
Answer:
- In the While loop, the condition is evaluated before the execution of the loop body; but in the Do..While loop, the
condition is evaluated after the execution of the loop body.
- The While loop will only loop while the condition is true; but the Do..While loop executes the statement is the code
block at least once even if the condition fails.

What is Enum?
Answer:
enum is short for enumerates, which means specifically listed.
An enum type is a special data type that represents a group of constants (unchangeable variables like final variables).
To create an enum, we use the enum keyword separating the constants with a comma.
enum values are static, italicized, and are in uppercase letters. Everything in an enum is final.
an enum have attributes and methods, just like a class, the only difference is that enum constants are public, static
and final.

What is Iterator?
Answer:
An Iterator is an object that can be used to loop through collections, like ArrayList and HashSet. It is called an
"iterator" because "iterating" is the technical term for looping.
A Java Cursor is an Iterator, which is used to iterate or traverse or retrieve a Collection or Stream object’s
elements one by one.

Which one will take more memory: an int or Integer? Why?
Answer:
An Integer object will take more memory than an int, because an int is a data type that stores 32 bits and Integer is
an object which takes 128 bits (16 bytes) to store its int value.

Why are Strings considered to be immutable in Java?
Answer:
In Java, string objects are immutable in nature which simply means once the String object is created its state cannot
be modified. Whenever you try to update the value of that object instead of updating the values of that particular
object, Java creates a new string object. Java String objects are immutable as String objects are generally cached
in the String pool. Since String literals are usually shared between multiple clients, action from one client might
affect the rest. It enhances security, caching, synchronization, and performance of the application.

What is constructor chaining in Java?
Answer:
In Java, constructor chaining is the process of calling one constructor from another with respect to the current object.
Constructor chaining is possible only through legacy where a subclass constructor is responsible for invoking the
superclass’ constructor first. There could be any number of classes in the constructor chain.
Constructor chaining can be achieved in two ways:
    - Within the same class using this()
    - From base class using super()

The difference between Serial and Parallel Garbage Collector?
Answer:
The only difference between serial and parallel garbage collector is that serial garbage collector uses a single thread
for garbage collection process while the parallel garbage collector uses multiple threads for the garbage collection.
Parallel garbage collector can use multiple CPUs to speed up the application throughput.

What does JIT stand for?
Answer:
JIT stands for Just-In-Time compiler.

Explain the process of Java garbage collection?
Answer:
Garbage collection is the process of reclaiming the unused memory space and making it available for the future instances.
1- When an instance is created, it is first stored in the eden space in young generation of heap memory area.
2- As part of the minor garbage collection cycle, objects that are live (which is still referenced) are moved to survivor
space S0 from eden space. Similarly, the garbage collector scans S0 and moves the live instances to S1.
3- Old or tenured generation is the second logical part of the heap memory. When the garbage collector does the minor
Garbage collection cycle, instances that are still live in the S1 survivor space will be promoted to the old generation.
Objects that are dereferenced in the S1 space is marked for eviction.
4- Old generation is the last phase in the instance life cycle with respect to the Java garbage collection process.
Major GC is the garbage collection process that scans the old generation part of the heap memory. If instances are
dereferenced, then they are marked for eviction and if not they just continue to stay in the old generation.
5- Once the instances are deleted from the heap memory the location becomes empty and becomes available for future
allocation of live instances. These empty spaces will be fragmented across the memory area. For quicker allocation
of the instance it should be defragmented. Based on the choice of the garbage collector, the reclaimed memory area
will either be compacted on the go or will be done in a separate pass of the Garbage collection.

Can you guarantee the garbage collection process?
Answer:
No, Garbage collection does not guarantee that a program will not run out of memory.
The purpose of garbage collection is to identify and discard objects that are no longer needed by a Java program,
so that their resources can be reclaimed and reused. An object is subjected to garbage collection when it becomes
unreachable to the program in which it is used. If there is insufficient memory remaining to satisfy the amount
needed for a new object, then the garbage collector will attempt to reclaim as much memory as possible by releasing
memory used by objects to which there are no longer any references. However, if there's still insufficient memory,
an "out of memory" exception will be thrown.

What is the difference between stack and heap in Java?
Answer:
In Java,
    - Stack memory is used only by one thread of execution, when Heap memory is used by all parts of the application;
    - Stack memory cannot be accessed by other threads, however, Objects stored in the heap are globally accessible;
    - Stack follows LIFO manner to free memory, when heap uses memory management based on the generation associated with
    each object;
    - Stack will exist until the end of execution of the thread, but heap memory lives from the start till the end of
    application execution;
    - Stack memory contains local primitive and reference variables to objects in heap space, but whenever an object is
    created, it will always be stored in the heap space.

What is reflection in Java and why is it useful?
Answer:
Reflection is an API which is used to examine or modify the behavior of methods, classes, interfaces at runtime.
The required classes for reflection are provided under java.lang.reflect package.
Reflection gives us information about the class to which an object belongs and also the methods of that class which
can be executed by using the object.
Through reflection, we can invoke methods at runtime irrespective of the access specifier used with them.
Reflection is used:
    - to invoke a method if we know its name and parameter types;
    - to access the private variables and methods of a class with the help of its class object and invoke the method
    by using the object;

What is multithreading in Java?
Answer:
Any application can have multiple processes (instances). Each of this process can be assigned either as a single thread
or multiple threads.
Multithreading in Java is a process of executing two or more threads simultaneously to maximum utilization of CPU.
Multithreaded applications execute two or more threads run concurrently, it is also known as Concurrency in Java.
Each thread runs parallel to each other. Mulitple threads do not allocate separate memory area, hence they save memory.

What is synchronization in Java?
Answer:
Synchronization refers to multi-threading. A synchronized block of code can be executed by only one thread at a time.
As Java supports execution of multiple threads, two or more threads may access the same fields or objects.
Synchronization is a process which keeps all concurrent threads in execution to be in sync.
Synchronization avoids memory consistency errors caused due to inconsistent view of shared memory.
When a method is declared as synchronized the thread holds the monitor for that method’s object.
If another thread is executing the synchronized method, the thread is blocked until that thread releases the monitor.

What is a Framework?
Answer:
In Java, frameworks are bodies of reusable pre-written code acting as templates that developers can use to create
applications by filling in custom code as needed. Frameworks are created to be used over and over so that developers
can program applications without the manual overhead of creating everything from scratch.

What are the testing Frameworks available in Java?
Answer:
- Selenium: Selenium is a free and open-source testing framework and is mostly used to test web applications based on
various platforms.
- Serenity: Serenity also provides an open-source platform primarily for behavior-driven testing and was earlier known by
the name Thucydides. Serenity helps you to write clean and structured acceptance criteria for test automation projects.
- JUnit: this particular framework aims at performing unit testing where a code snippet can be passed in the path, via
functions or methods. The unit test code is advised to be pre-written before writing any real code when a test-driven
approach is being followed.
- TestNG: TestNG is an open-source testing framework and inspired by the other two prominent frameworks – JUnit and
NUnit with some new additional functionalities. Deriving from its name where NG stands for Next Generation, this
framework does not disappoint to prove its strength in testing.
- Cucumber: Cucumber is a testing framework written in Ruby that has been popular among testers because, of the fact
that it consolidates the documentation along with the specifications and delivers a single report document.
- JBehave: this is a Java-based testing framework that is mostly found working in conjugation with selenium drivers and
supports Behavior-driven development (BDD). It comes up with a reporting feature which implies that the reports can be
generated in the XML, HTML, or Text format.

What are jUnit and testNG?
Answer:
JUnit is a framework that aims at performing unit testing where a code snippet can be passed in the path, via
functions or methods. The unit test code is advised to be pre-written before writing any real code when a test-driven
approach is being followed.
After a developer writes any code, the test cases need to be executed before the code snippet can be run. Every time
a new code is added, the test cases are run again to ensure all the test scenarios are passed and there is no issue in
the code. This framework stands apart from others because of it being comparatively faster and efficient than other
similar frameworks.
TestNG is an open-source testing framework and inspired by the other two prominent frameworks – JUnit and
NUnit with some new additional functionalities. Deriving from its name where NG stands for Next Generation, this
framework does not disappoint to prove its strength in testing.
The process of testing here is also not very complex where we can test the scenarios by requesting through the
framework to test the databases or maybe the front ends. An HTML report can also be extracted which is quite useful
for the tests being performed.

What are the dependencies for this project?
Answer:
the dependencies for this project are the classes that uses some methods of another class.

What is dependency injection in Java?
Answer:
Dependency injection is the concept in which objects get other required objects from outside. dependency injection can
be implemented in any programming language. The general concept behind dependency injection is called Inversion
of Control. A Java class has a dependency on another class, if it uses an instance of this class.

Explain what static binding and dynamic binding is?
Answer:
In static binding, static members of a class are bounded to memory at compile-time. Static binding uses method and
constructor overloading.
In dynamic binding, non-static members of a class are bounded to memory at runtime. Dynamic binding uses method
overriding.